// <auto-generated />
using System;
using DataBase.Models.Themoviedb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataBase.Migrations
{
    [DbContext(typeof(TheMovieDbContext))]
    partial class TheMovieDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataBase.Models.Themoviedb.CinemasStatus", b =>
                {
                    b.Property<int>("CinemaStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cinemaStatus")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .IsUnicode(false);

                    b.HasKey("CinemaStatus");

                    b.ToTable("CinemasStatus","Filmes");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.ColecoesThemoviedb", b =>
                {
                    b.Property<long>("Colecao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("colecao")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackdropPath")
                        .IsRequired()
                        .HasColumnName("backdrop_path")
                        .IsUnicode(false);

                    b.Property<long?>("Filme")
                        .HasColumnName("filme");

                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .IsUnicode(false);

                    b.Property<string>("PosterPath")
                        .IsRequired()
                        .HasColumnName("poster_path")
                        .IsUnicode(false);

                    b.HasKey("Colecao");

                    b.HasIndex("Filme");

                    b.ToTable("ColecoesThemoviedb","FilmesStage");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.CrewThemoviedb", b =>
                {
                    b.Property<long>("Crew")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("crew")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreditId")
                        .HasColumnName("credit_id")
                        .IsUnicode(false);

                    b.Property<string>("Department")
                        .HasColumnName("department")
                        .IsUnicode(false);

                    b.Property<long?>("Filme")
                        .HasColumnName("filme");

                    b.Property<int?>("Gender")
                        .HasColumnName("gender");

                    b.Property<int?>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Job")
                        .HasColumnName("job")
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .IsUnicode(false);

                    b.Property<string>("ProfilePath")
                        .HasColumnName("profile_path")
                        .IsUnicode(false);

                    b.HasKey("Crew");

                    b.HasIndex("Filme");

                    b.ToTable("CrewThemoviedb","FilmesStage");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.Datas", b =>
                {
                    b.Property<int>("Data")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("data")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Ano")
                        .HasColumnName("ano");

                    b.Property<DateTime?>("DataCompleta")
                        .HasColumnName("dataCompleta")
                        .HasColumnType("date");

                    b.Property<int?>("Dia")
                        .HasColumnName("dia");

                    b.Property<int?>("Mes")
                        .HasColumnName("mes");

                    b.HasKey("Data");

                    b.ToTable("Datas","Filmes");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.Detalhes", b =>
                {
                    b.Property<int>("Filme")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("filme")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("IdOrigem")
                        .HasColumnName("idOrigem");

                    b.Property<string>("PosterUrl")
                        .HasColumnName("posterUrl")
                        .IsUnicode(false);

                    b.Property<string>("Titulo")
                        .HasColumnName("titulo")
                        .IsUnicode(false);

                    b.Property<string>("TituloOriginal")
                        .HasColumnName("tituloOriginal")
                        .IsUnicode(false);

                    b.HasKey("Filme");

                    b.ToTable("Detalhes","Filmes");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.Fatos", b =>
                {
                    b.Property<int>("Filme")
                        .HasColumnName("filme");

                    b.Property<int>("CinemaStatus")
                        .HasColumnName("cinemaStatus");

                    b.Property<int?>("GeneroGrupo")
                        .HasColumnName("generoGrupo");

                    b.Property<int?>("LancamentoData")
                        .HasColumnName("lancamentoData");

                    b.Property<decimal?>("Lucro")
                        .HasColumnName("lucro")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("LucroProdutora")
                        .HasColumnName("lucroProdutora")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("Orcamento")
                        .HasColumnName("orcamento")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("PessoaGrupo")
                        .HasColumnName("pessoaGrupo");

                    b.Property<int?>("ProducaoPaisGrupo")
                        .HasColumnName("producaoPaisGrupo");

                    b.Property<int?>("ProdutoraGrupo")
                        .HasColumnName("produtoraGrupo");

                    b.Property<decimal?>("Receita")
                        .HasColumnName("receita")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("ReceitaProdutora")
                        .HasColumnName("receitaProdutora")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("ReceitaRank")
                        .HasColumnName("receitaRank");

                    b.HasKey("Filme");

                    b.HasIndex("CinemaStatus");

                    b.HasIndex("LancamentoData");

                    b.ToTable("Fatos","Filmes");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.FilmesCartazFila", b =>
                {
                    b.Property<long>("FilemCartazFila")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("filemCartazFila")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DataHora")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dataHora")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .IsUnicode(false);

                    b.Property<string>("OrigemServico")
                        .HasColumnName("origemServico")
                        .IsUnicode(false);

                    b.Property<string>("ProcessamentoMensagem")
                        .HasColumnName("processamentoMensagem")
                        .IsUnicode(false);

                    b.Property<int?>("ProcessamentoStatus")
                        .HasColumnName("processamentoStatus");

                    b.HasKey("FilemCartazFila");

                    b.HasIndex("ProcessamentoStatus");

                    b.ToTable("FilmesCartazFila","FilmesStage");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.FilmesFilas", b =>
                {
                    b.Property<long>("FilmeFila")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("filmeFila")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DataHora")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dataHora")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("FilmeFilaTipo")
                        .HasColumnName("filmeFilaTipo");

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .IsUnicode(false);

                    b.Property<string>("OrigemServico")
                        .HasColumnName("origemServico")
                        .IsUnicode(false);

                    b.Property<string>("ProcessamentoMensagem")
                        .HasColumnName("processamentoMensagem")
                        .IsUnicode(false);

                    b.Property<int?>("ProcessamentoStatus")
                        .HasColumnName("processamentoStatus");

                    b.HasKey("FilmeFila");

                    b.HasIndex("FilmeFilaTipo");

                    b.ToTable("FilmesFilas","FilmesStage");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.FilmesFilasTipos", b =>
                {
                    b.Property<int>("FilmeFilaTipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("filmeFilaTipo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("FilmeFilaTipo");

                    b.ToTable("FilmesFilasTipos","FilmesStage");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.FilmesThemoviedb", b =>
                {
                    b.Property<long>("Filme")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("filme")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adult")
                        .HasColumnName("adult")
                        .IsUnicode(false);

                    b.Property<string>("BackdropPath")
                        .HasColumnName("backdrop_path")
                        .IsUnicode(false);

                    b.Property<double?>("Budget")
                        .HasColumnName("budget");

                    b.Property<int?>("CinemaStatus")
                        .HasColumnName("cinemaStatus");

                    b.Property<string>("Homepage")
                        .HasColumnName("homepage")
                        .IsUnicode(false);

                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .IsUnicode(false);

                    b.Property<string>("ImdbId")
                        .HasColumnName("imdb_id")
                        .IsUnicode(false);

                    b.Property<string>("OriginalLanguage")
                        .HasColumnName("original_language")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("OriginalTitle")
                        .HasColumnName("original_title")
                        .IsUnicode(false);

                    b.Property<string>("Overview")
                        .HasColumnName("overview")
                        .IsUnicode(false);

                    b.Property<decimal?>("Popularity")
                        .HasColumnName("popularity")
                        .HasColumnType("numeric(7, 3)");

                    b.Property<string>("PosterPath")
                        .HasColumnName("poster_path")
                        .IsUnicode(false);

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnName("release_date")
                        .HasColumnType("date");

                    b.Property<int?>("Revenue")
                        .HasColumnName("revenue");

                    b.Property<int?>("Runtime")
                        .HasColumnName("runtime");

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .IsUnicode(false);

                    b.Property<string>("Tagline")
                        .HasColumnName("tagline")
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .IsUnicode(false);

                    b.Property<string>("Video")
                        .HasColumnName("video")
                        .IsUnicode(false);

                    b.Property<decimal?>("VoteAverage")
                        .HasColumnName("vote_average")
                        .HasColumnType("numeric(3, 1)");

                    b.Property<int?>("VoteCount")
                        .HasColumnName("vote_count");

                    b.HasKey("Filme");

                    b.ToTable("FilmesThemoviedb","FilmesStage");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.Generos", b =>
                {
                    b.Property<int>("Genero")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("genero")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IdOrigem")
                        .HasColumnName("idOrigem");

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .IsUnicode(false);

                    b.HasKey("Genero");

                    b.ToTable("Generos","Filmes");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.GenerosGrupos", b =>
                {
                    b.Property<int>("GeneroGrupo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("generoGrupo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Genero")
                        .HasColumnName("genero");

                    b.Property<int?>("Grupo")
                        .HasColumnName("grupo");

                    b.Property<int?>("IdOrigem")
                        .HasColumnName("idOrigem");

                    b.HasKey("GeneroGrupo");

                    b.HasIndex("Genero")
                        .HasName("IFK_Filmes_Genero");

                    b.HasIndex("IdOrigem");

                    b.ToTable("GenerosGrupos","Filmes");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.GenerosThemoviedb", b =>
                {
                    b.Property<long>("Genero")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("genero")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("Filme")
                        .HasColumnName("filme");

                    b.Property<int?>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .IsUnicode(false);

                    b.HasKey("Genero");

                    b.HasIndex("Filme");

                    b.ToTable("GenerosThemoviedb","FilmesStage");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.LinguasThemoviedb", b =>
                {
                    b.Property<long>("Lingua")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lingua")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("Filme")
                        .HasColumnName("filme");

                    b.Property<string>("Iso6391")
                        .HasColumnName("iso_639_1")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .IsUnicode(false);

                    b.HasKey("Lingua");

                    b.HasIndex("Filme");

                    b.ToTable("LinguasThemoviedb","FilmesStage");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.Paises", b =>
                {
                    b.Property<int>("Pais")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pais")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("IdOrigem")
                        .HasColumnName("idOrigem");

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .IsUnicode(false);

                    b.Property<string>("Sigla")
                        .HasColumnName("sigla")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.HasKey("Pais");

                    b.ToTable("Paises","Filmes");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.PaisesProducoesThemoviedb", b =>
                {
                    b.Property<long>("PaisProducao")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("Filme")
                        .HasColumnName("filme");

                    b.Property<string>("Iso31661")
                        .HasColumnName("iso_3166_1")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .IsUnicode(false);

                    b.HasKey("PaisProducao");

                    b.HasIndex("Filme");

                    b.ToTable("PaisesProducoesThemoviedb","FilmesStage");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.Pessoas", b =>
                {
                    b.Property<long>("Pessoa")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pessoa")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Departamento")
                        .HasColumnName("departamento")
                        .IsUnicode(false);

                    b.Property<int?>("Id")
                        .HasColumnName("id");

                    b.Property<int?>("IdOrigem")
                        .HasColumnName("idOrigem");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .IsUnicode(false);

                    b.Property<string>("ProfilePath")
                        .HasColumnName("profilePath")
                        .IsUnicode(false);

                    b.HasKey("Pessoa");

                    b.ToTable("Pessoas","Filmes");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.PessoasGrupos", b =>
                {
                    b.Property<long>("PessoaGrupo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pessoaGrupo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Grupo")
                        .HasColumnName("grupo");

                    b.Property<int?>("IdOrigem")
                        .HasColumnName("idOrigem");

                    b.Property<long?>("Pessoa")
                        .HasColumnName("pessoa");

                    b.HasKey("PessoaGrupo");

                    b.HasIndex("Pessoa");

                    b.ToTable("PessoasGrupos","Filmes");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.ProcessamentosStatus", b =>
                {
                    b.Property<int>("ProcessamentoStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("processamentoStatus")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("ProcessamentoStatus");

                    b.ToTable("ProcessamentosStatus");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.ProducoesPaisesGrupos", b =>
                {
                    b.Property<int>("ProducaoPaisGrupo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("producaoPaisGrupo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Grupo")
                        .HasColumnName("grupo");

                    b.Property<int?>("IdOrigem")
                        .HasColumnName("idOrigem");

                    b.Property<int>("Pais")
                        .HasColumnName("pais");

                    b.HasKey("ProducaoPaisGrupo");

                    b.HasIndex("IdOrigem");

                    b.HasIndex("Pais")
                        .HasName("ProducoesPaisesGrupos_FKIndex1");

                    b.ToTable("ProducoesPaisesGrupos","Filmes");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.Produtoras", b =>
                {
                    b.Property<int>("Produtora")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("produtora")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .HasColumnName("descricao")
                        .IsUnicode(false);

                    b.Property<int?>("IdOrigem")
                        .HasColumnName("idOrigem");

                    b.HasKey("Produtora");

                    b.ToTable("Produtoras","Filmes");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.ProdutorasGrupos", b =>
                {
                    b.Property<int>("ProdutoraGrupo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("produtoraGrupo")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Grupo")
                        .HasColumnName("grupo");

                    b.Property<int?>("IdOrigem")
                        .HasColumnName("idOrigem");

                    b.Property<int>("Produtora")
                        .HasColumnName("produtora");

                    b.HasKey("ProdutoraGrupo");

                    b.HasIndex("IdOrigem");

                    b.HasIndex("Produtora")
                        .HasName("ProdutorasGrupo_FKIndex1");

                    b.ToTable("ProdutorasGrupos","Filmes");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.ProdutorasThemoviedb", b =>
                {
                    b.Property<long>("Produtora")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("Filme")
                        .HasColumnName("filme");

                    b.Property<int?>("Id")
                        .HasColumnName("id");

                    b.Property<string>("LogoPath")
                        .HasColumnName("logo_path")
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .IsUnicode(false);

                    b.Property<string>("OriginCountry")
                        .HasColumnName("origin_country")
                        .IsUnicode(false);

                    b.HasKey("Produtora");

                    b.HasIndex("Filme");

                    b.ToTable("ProdutorasThemoviedb","FilmesStage");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.TheMoviesDbConfiguracoes", b =>
                {
                    b.Property<long>("TheMovieDbConfiguracao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("theMovieDbConfiguracao")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("GetDiretores")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("getDiretores")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Metodo")
                        .HasColumnName("metodo")
                        .IsUnicode(false);

                    b.Property<string>("Nome")
                        .HasColumnName("nome")
                        .IsUnicode(false);

                    b.Property<string>("Servico")
                        .HasColumnName("servico")
                        .IsUnicode(false);

                    b.Property<string>("Url")
                        .HasColumnName("url")
                        .IsUnicode(false);

                    b.Property<string>("UrlComplemento")
                        .HasColumnName("urlComplemento")
                        .IsUnicode(false);

                    b.Property<string>("UrlFiltro")
                        .HasColumnName("urlFiltro")
                        .IsUnicode(false);

                    b.HasKey("TheMovieDbConfiguracao");

                    b.ToTable("TheMoviesDbConfiguracoes");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.TheMoviesDbConfiguracoesMapeamentos", b =>
                {
                    b.Property<long>("TheMovieDbConfiguracaoMapeamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("theMovieDbConfiguracaoMapeamento")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ordenacao")
                        .HasColumnName("ordenacao");

                    b.Property<long?>("TheMovieDbConfiguracao")
                        .HasColumnName("theMovieDbConfiguracao");

                    b.HasKey("TheMovieDbConfiguracaoMapeamento");

                    b.HasIndex("TheMovieDbConfiguracao");

                    b.ToTable("TheMoviesDbConfiguracoesMapeamentos");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.TheMoviesDbConfiguracoesMapeamentosExecucoes", b =>
                {
                    b.Property<long>("TheMovieDbConfiguracaoMapeamentoExecucao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("theMovieDbConfiguracaoMapeamentoExecucao")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DataHora")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dataHora")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ProcessamentoMensagem")
                        .HasColumnName("processamentoMensagem")
                        .IsUnicode(false);

                    b.Property<int?>("ProcessamentoStatus")
                        .HasColumnName("processamentoStatus");

                    b.Property<long?>("TheMovieDbConfiguracaoMapeamento")
                        .HasColumnName("theMovieDbConfiguracaoMapeamento");

                    b.HasKey("TheMovieDbConfiguracaoMapeamentoExecucao");

                    b.HasIndex("ProcessamentoStatus");

                    b.HasIndex("TheMovieDbConfiguracaoMapeamento");

                    b.ToTable("TheMoviesDbConfiguracoesMapeamentosExecucoes");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.ColecoesThemoviedb", b =>
                {
                    b.HasOne("DataBase.Models.Themoviedb.FilmesThemoviedb", "FilmeNavigation")
                        .WithMany("ColecoesThemoviedb")
                        .HasForeignKey("Filme")
                        .HasConstraintName("FK__ColecoesT__filme__38996AB5");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.CrewThemoviedb", b =>
                {
                    b.HasOne("DataBase.Models.Themoviedb.FilmesThemoviedb", "FilmeNavigation")
                        .WithMany("CrewThemoviedb")
                        .HasForeignKey("Filme")
                        .HasConstraintName("FK__CrewThemo__filme__114A936A");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.Fatos", b =>
                {
                    b.HasOne("DataBase.Models.Themoviedb.CinemasStatus", "CinemaStatusNavigation")
                        .WithMany("Fatos")
                        .HasForeignKey("CinemaStatus")
                        .HasConstraintName("FK__Fatos__cinemaSta__07C12930");

                    b.HasOne("DataBase.Models.Themoviedb.Detalhes", "FilmeNavigation")
                        .WithOne("Fatos")
                        .HasForeignKey("DataBase.Models.Themoviedb.Fatos", "Filme")
                        .HasConstraintName("FK__Fatos__filme__08B54D69");

                    b.HasOne("DataBase.Models.Themoviedb.Datas", "LancamentoDataNavigation")
                        .WithMany("Fatos")
                        .HasForeignKey("LancamentoData")
                        .HasConstraintName("FK__Fatos__lancament__09A971A2");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.FilmesCartazFila", b =>
                {
                    b.HasOne("DataBase.Models.Themoviedb.ProcessamentosStatus", "ProcessamentoStatusNavigation")
                        .WithMany("FilmesCartazFila")
                        .HasForeignKey("ProcessamentoStatus")
                        .HasConstraintName("FK__FilmesCar__proce__66603565");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.FilmesFilas", b =>
                {
                    b.HasOne("DataBase.Models.Themoviedb.FilmesFilasTipos", "FilmeFilaTipoNavigation")
                        .WithMany("FilmesFilas")
                        .HasForeignKey("FilmeFilaTipo")
                        .HasConstraintName("FK__FilmesFil__filme__5629CD9C");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.GenerosGrupos", b =>
                {
                    b.HasOne("DataBase.Models.Themoviedb.Generos", "GeneroNavigation")
                        .WithMany("GenerosGrupos")
                        .HasForeignKey("Genero")
                        .HasConstraintName("FK__GenerosGr__gener__7B5B524B");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.GenerosThemoviedb", b =>
                {
                    b.HasOne("DataBase.Models.Themoviedb.FilmesThemoviedb", "FilmeNavigation")
                        .WithMany("GenerosThemoviedb")
                        .HasForeignKey("Filme")
                        .HasConstraintName("FK__GenerosTh__filme__48CFD27E");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.LinguasThemoviedb", b =>
                {
                    b.HasOne("DataBase.Models.Themoviedb.FilmesThemoviedb", "FilmeNavigation")
                        .WithMany("LinguasThemoviedb")
                        .HasForeignKey("Filme")
                        .HasConstraintName("FK__LinguasTh__filme__45F365D3");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.PaisesProducoesThemoviedb", b =>
                {
                    b.HasOne("DataBase.Models.Themoviedb.FilmesThemoviedb", "FilmeNavigation")
                        .WithMany("PaisesProducoesThemoviedb")
                        .HasForeignKey("Filme")
                        .HasConstraintName("FK__PaisesPro__filme__4316F928");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.PessoasGrupos", b =>
                {
                    b.HasOne("DataBase.Models.Themoviedb.Pessoas", "PessoaNavigation")
                        .WithMany("PessoasGrupos")
                        .HasForeignKey("Pessoa")
                        .HasConstraintName("FK__PessoasGr__pesso__160F4887");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.ProducoesPaisesGrupos", b =>
                {
                    b.HasOne("DataBase.Models.Themoviedb.Paises", "PaisNavigation")
                        .WithMany("ProducoesPaisesGrupos")
                        .HasForeignKey("Pais")
                        .HasConstraintName("FK__ProducoesP__pais__787EE5A0");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.ProdutorasGrupos", b =>
                {
                    b.HasOne("DataBase.Models.Themoviedb.Produtoras", "ProdutoraNavigation")
                        .WithMany("ProdutorasGrupos")
                        .HasForeignKey("Produtora")
                        .HasConstraintName("FK__Produtora__produ__75A278F5");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.ProdutorasThemoviedb", b =>
                {
                    b.HasOne("DataBase.Models.Themoviedb.FilmesThemoviedb", "FilmeNavigation")
                        .WithMany("ProdutorasThemoviedb")
                        .HasForeignKey("Filme")
                        .HasConstraintName("FK__Produtora__filme__403A8C7D");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.TheMoviesDbConfiguracoesMapeamentos", b =>
                {
                    b.HasOne("DataBase.Models.Themoviedb.TheMoviesDbConfiguracoes", "TheMovieDbConfiguracaoNavigation")
                        .WithMany("TheMoviesDbConfiguracoesMapeamentos")
                        .HasForeignKey("TheMovieDbConfiguracao")
                        .HasConstraintName("FK__TheMovies__theMo__1EA48E88");
                });

            modelBuilder.Entity("DataBase.Models.Themoviedb.TheMoviesDbConfiguracoesMapeamentosExecucoes", b =>
                {
                    b.HasOne("DataBase.Models.Themoviedb.ProcessamentosStatus", "ProcessamentoStatusNavigation")
                        .WithMany("TheMoviesDbConfiguracoesMapeamentosExecucoes")
                        .HasForeignKey("ProcessamentoStatus")
                        .HasConstraintName("FK__TheMovies__proce__22751F6C");

                    b.HasOne("DataBase.Models.Themoviedb.TheMoviesDbConfiguracoesMapeamentos", "TheMovieDbConfiguracaoMapeamentoNavigation")
                        .WithMany("TheMoviesDbConfiguracoesMapeamentosExecucoes")
                        .HasForeignKey("TheMovieDbConfiguracaoMapeamento")
                        .HasConstraintName("FK__TheMovies__theMo__2180FB33");
                });
#pragma warning restore 612, 618
        }
    }
}
